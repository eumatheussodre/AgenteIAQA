# Funcionalidades/Testes/Geradores/generator_Casos.py

import os
import json
import requests
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do ficheiro .env
load_dotenv()

# --- Constantes e Configura√ß√£o da API do Google ---
API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro-latest:generateContent"
API_KEY = os.getenv("GOOGLE_API_KEY")


def construir_prompt_login() -> str:
    """Constr√≥i o prompt detalhado para gerar testware de login."""

    # O seu prompt, agora integrado diretamente no c√≥digo.
    # Adicionamos instru√ß√µes expl√≠citas para a IA retornar um JSON.
    prompt = """
    Aja como um especialista em Quality Assurance. Utilize questionamento socr√°tico internamente para desenvolver os seguintes testwares para a funcionalidade de Login de um sistema. A tela de login cont√©m apenas os campos "username", "password" e um bot√£o de "login". O tipo de teste a ser executado √© apenas funcional, focado na norma ISO 25010.

    **Sua resposta DEVE ser um √∫nico objeto JSON v√°lido, contendo duas chaves principais: "cenarios_storytelling" e "casos_de_teste_tabela".**

    1.  **Para a chave "cenarios_storytelling":**
        * Crie uma lista de strings. Cada string deve ser o t√≠tulo de um cen√°rio de teste utilizando storytelling.
        * O t√≠tulo deve gerar empatia e expor um objetivo do usu√°rio.
        * Exemplo de um bom t√≠tulo: "Acesso r√°pido √† conta por um gestor de projetos antes de uma reuni√£o importante."

    2.  **Para a chave "casos_de_teste_tabela":**
        * Crie uma √öNICA STRING contendo uma tabela de decis√£o em formato Markdown.
        * A tabela n√£o pode estar quebrada ou mal formatada.
        * Organize a tabela com as seguintes se√ß√µes e t√©cnicas de teste, nesta ordem:
            * üü¢ **Testes Positivos (Caminho Feliz):** Username e password v√°lidos.
            * üü† **Testes Negativos (Inputs V√°lidos):** Combina√ß√µes de username e password que existem mas n√£o correspondem, ou contas bloqueadas.
            * üî¥ **Testes Negativos (Inputs Inv√°lidos):** Use Parti√ß√£o de Equival√™ncia e An√°lise de Valor Limite. Teste cada vari√°vel inv√°lida separadamente (username inv√°lido, senha inv√°lida) e depois todas juntas.
            * üí• **Testes Destrutivos:** Inputs inesperados, como inje√ß√£o de SQL simples, scripts, ou caracteres especiais.

    **Exemplo do formato JSON esperado:**
    {
      "cenarios_storytelling": [
        "T√≠tulo do cen√°rio 1...",
        "T√≠tulo do cen√°rio 2..."
      ],
      "casos_de_teste_tabela": "| T√©cnica | ID do Teste | Condi√ß√£o (Username) | Condi√ß√£o (Password) | A√ß√£o | Resultado Esperado |\\n|---|---|---|---|---|---|\\n| üü¢ Positivo | CTP-001 | Usu√°rio V√°lido | Senha V√°lida | Clicar em Login | Login bem-sucedido. |\\n..."
    }
    """
    return prompt


def gerar_casos_de_teste(texto_requisitos_dev: str, texto_requisitos_spec: str) -> list[str]:
    """
    Gera casos de teste usando a API do Google Gemini, solicitando e processando uma resposta JSON.
    Os argumentos texto_requisitos_* s√£o mantidos para compatibilidade com a interface, mas o prompt principal √© fixo.
    """
    if not API_KEY:
        return ["‚ö†Ô∏è Erro: Chave da API do Google (GOOGLE_API_KEY) n√£o encontrada."]

    # Usa a nova fun√ß√£o para construir o prompt espec√≠fico de login
    prompt_texto = construir_prompt_login()

    url_com_chave = f"{API_URL}?key={API_KEY}"

    payload = {
        "contents": [{"parts": [{"text": prompt_texto}]}],
        # Configura√ß√µes para for√ßar a sa√≠da em formato JSON
        "generationConfig": {
            "response_mime_type": "application/json",
        }
    }

    headers = {'Content-Type': 'application/json'}

    try:
        response = requests.post(
            url_com_chave, headers=headers, json=payload, timeout=120)
        response.raise_for_status()

        resultado_json = response.json()

        # Extrai o conte√∫do do JSON gerado pela IA
        conteudo_gerado = resultado_json['candidates'][0]['content']['parts'][0]['text']
        dados = json.loads(conteudo_gerado)

        # Agora, processamos o JSON recebido para formatar a sa√≠da para o Streamlit
        saida_formatada = []

        # Adiciona o t√≠tulo da primeira se√ß√£o
        saida_formatada.append("### üé≠ Cen√°rios de Teste (Storytelling)")
        cenarios = dados.get("cenarios_storytelling", [])
        if cenarios:
            saida_formatada.extend([f"- {cenario}" for escenario in cenarios])
        else:
            saida_formatada.append(
                "Nenhum cen√°rio de storytelling foi gerado.")

        # Adiciona um separador e o t√≠tulo da segunda se√ß√£o
        saida_formatada.append(
            "\n---\n### üìä Casos de Teste (Tabela de Decis√£o)")
        tabela_markdown = dados.get(
            "casos_de_teste_tabela", "A tabela de casos de teste n√£o foi gerada.")

        # Adiciona a tabela inteira como um √∫nico item, para garantir que n√£o seja quebrada
        saida_formatada.append(tabela_markdown)

        return saida_formatada

    except requests.RequestException as e:
        detalhes = f"Detalhes: {e.response.text}" if e.response else "Sem detalhes adicionais."
        return [f"‚ùå Erro na requisi√ß√£o √† API: {e}. {detalhes}"]
    except (KeyError, IndexError, json.JSONDecodeError) as e:
        return [f"‚ùå Erro ao processar a resposta da API. A estrutura do JSON pode ser inv√°lida. Detalhe: {e}"]
