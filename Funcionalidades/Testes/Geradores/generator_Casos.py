# generator_Casos.py

import os
import json
import requests
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do ficheiro .env
load_dotenv()

# --- Constantes ---
API_URL = "https://api-inference.huggingface.co/models/HuggingFaceH4/zephyr-7b-beta"
# Carrega o token de forma segura a partir das vari√°veis de ambiente
API_TOKEN = os.getenv("HUGGINGFACE_API_TOKEN")


def gerar_casos_de_teste(texto_requisitos_dev: str, texto_requisitos_spec: str) -> list[str]:
    """
    Gera casos de teste em formato de texto a partir de documentos de requisitos,
    solicitando uma resposta JSON estruturada da API de IA.
    """
    if not API_TOKEN:
        print("‚ö†Ô∏è Erro: Token da API (HUGGINGFACE_API_TOKEN) n√£o encontrado nas vari√°veis de ambiente.")
        return []

    headers = {"Authorization": f"Bearer {API_TOKEN}"}

    # Prompt instruindo a IA a retornar um JSON estruturado.
    # Isto √© muito mais robusto do que processar texto livre.
    prompt = f"""
    Quero que voc√™ desenvolva os seguintes testwares para a funcionalidade de Login.
Utilize questionamento socr√°tico em todo o processo, mas n√£o precisa mostrar as perguntas. Mostre apenas se eu pedir.

Login: A tela de login cont√©m apenas campo de username, password e bot√£o de login.

Tipo de teste a ser executado: Apenas funcional - ISO 25010.
Artefatos:
    Cen√°rio de teste utilizando storytelling
        Forma: 
            Aqui n√£o √© para contar uma hist√≥ria, √© para montar um caso de teste que considere a realidade do usu√°rio final, guiando o QA para pensar e agir como o usu√°rio final.
            Exiba apenas o titulo do cen√°rio de teste. 
            Mostre a hist√≥ria apenas se eu pedir.
            Os cen√°rio devem ser reestritos ao contexto de utiliza√ß√£o da funcionalidade que estamos testando.
            O nome deve: 
                Gerar empatia no leitor.
                Expor um poss√≠vel prop√≥sito/objetivo pelo qual o usu√°rio vai utilizar a funcionalidade/servi√ßo.
        Exemplo:
            Cen√°rio errado: Registro de um voo
            Cen√°rio certo: Agendamento de voo por um casal em viajem de lua de mel

    Casos de teste utilizando t√©cnicas de teste
            Construa uma tabela de decis√£o utilizando as t√©cnicas:
                Teste positivo/negativo/destrutivo
                An√°lise do valor limite
                Parti√ß√£o de equival√™ncia
                Organiza√ß√£o da tabela:
                    üü¢ Testes positivos (caminho feliz)
                    üü¢ Testes positivos com par√¢metros opcionais
                    üü† Testes negativos com inputs validos
                    üî¥ Testes negativos com inputs inv√°lidos
                    üí• Testes destrutivos

Refor√ßo:
1. Construa os cen√°rios onde s√£o testados valores inv√°lidos para cada vari√°vel e ao final mais um cen√°rio para todas as vari√°veis inv√°lidas;
    Exemplo:
        Cen√°rio 1: usu√°rio = valido | senha = valida
        Cen√°rio 2: usu√°rio = invalido | senha = valida
        Cen√°rio 3: usu√°rio = valido | senha = invalida
        Cen√°rio 4: usu√°rio = valido | senha = invalida
2. Considere correla√ß√µes entre as vari√°veis;
3. A tabela exibida n√£o pode ficar desformatada;
4. Aprenda e reflita sobre os princ√≠pios das t√©cnicas e estrat√©gias de teste¬†solicitadas."""

    payload = {
        "inputs": prompt,
        "parameters": {"max_new_tokens": 1024, "temperature": 0.5},
    }

    try:
        response = requests.post(
            API_URL, headers=headers, json=payload, timeout=90)
        response.raise_for_status()  # Lan√ßa uma exce√ß√£o para status de erro (4xx ou 5xx)

        # Extrai o texto gerado pela IA
        resultado_bruto = response.json()
        texto_gerado = resultado_bruto[0]['generated_text']

        # A IA pode retornar o JSON dentro de um bloco de c√≥digo, ent√£o extra√≠mos apenas o JSON
        json_str = texto_gerado[texto_gerado.find(
            '['):texto_gerado.rfind(']')+1]

        # Converte a string JSON numa lista de dicion√°rios Python
        casos_json = json.loads(json_str)

        # Formata a lista de dicion√°rios para a lista de strings esperada
        casos_formatados = []
        for caso in casos_json:
            etapas_str = "\n".join(
                [f"- {etapa}" for etapa in caso.get("etapas", [])])
            caso_str = (
                f"ID: {caso.get('id', 'N/A')}\n"
                f"Descri√ß√£o: {caso.get('descricao', 'N/A')}\n"
                f"{etapas_str}\n"
                f"Resultado Esperado: {caso.get('resultado_esperado', 'N/A')}"
            )
            casos_formatados.append(caso_str)

        return casos_formatados

    except requests.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o √† API: {e}")
        return []
    except json.JSONDecodeError:
        print("‚ùå Erro: A resposta da IA n√£o era um JSON v√°lido.")
        # Opcional: pode guardar 'texto_gerado' num ficheiro para depura√ß√£o
        return []
    except (IndexError, KeyError) as e:
        print(
            f"‚ùå Erro: A resposta da API n√£o continha o formato esperado. Detalhe: {e}")
        return []
